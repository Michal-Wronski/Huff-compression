/*
The code by Robert Dryło, Tomasz Kijko and Michał Wroński from Military University of Technology in Warsaw.
This code proves that formulas for differential addition, doubling and point recovery on general Huff's curve using compression function f(P)=xy are correct.
*/

//Definition of field of rationals
Q:=Rationals(); 

//Definition of function field
rQ<a,b>:=FunctionField(Q,2); 

//Definition of polynomial ring over function field rQ
pF2<x,y>:=PolynomialRing(rQ,2);

//General Huff's curve equation in normal form
H:=x*(a*y^2-1) - y*(b*x^2-1);  	

//Definition of compression function of degree 2 on general Huff's curve
f:=x^2; 

//Definition of polynomial ring over function field rQ
pF4<x1,y1,x2,y2>:=PolynomialRing(rQ,4);

//Definition of addition law on general Huff's curves (P+Q)
x3:= (x1+x2)*(1+a*y1*y2)/((1+b*x1*x2)*(1-a*y1*y2));
y3:= (y1+y2)*(1+b*x1*x2)/((1-b*x1*x2)*(1+a*y1*y2));

//Point doubling
xd:=Evaluate(x3,[x,y,x,y]); 
yd:=Evaluate(y3,[x,y,x,y]); 

//Computation of f([2]P)
fd:=Evaluate(f,[xd,yd]); 

//Computation of f_{4,y^2}([2]P) having f_{4,x^2}(P)
fd2:=Evaluate(f,[yd,0]);

//Computation of P-Q
x4:=Evaluate(x3, [x1,y1,-x2,-y2]);       
y4:=Evaluate(y3, [x1,y1,-x2,-y2]);  

//Evaluation of compression function f in given points P, Q, P+Q, P-Q respectively
f1:=Evaluate(f,[x1,y1]);
f2:=Evaluate(f,[x2,y2]);
f3:=Evaluate(f,[x3,y3]);
f4:=Evaluate(f,[x4,y4]);

//Ideals definition
I:=ideal<pF2|H>; 
I1:=ideal<pF4|[Evaluate(H,[x1,y1]),Evaluate(H,[x2,y2])]>;  

/*
Chcecking of correctness of doubling formula using compression function f, where f:=f(P), and fd:=f([2]P).
We check if fd:=f([2]P) is equal to 4/b^2*f*(f^2+(4*a-2*b)/b^2*f+1/b^2)/(f^2-1/b^2)^2.
The formula is correct if the result is equal to 0.
*/
NormalForm(Numerator(fd - 4/b^2*f*(f^2+(4*a-2*b)/b^2*f+1/b^2)/(f^2-1/b^2)^2), I);    


/*
Chcecking of correctness of doubling formula using compression function f, where f:=f(P), and fd2:=g([2]P), where g(P)=y^2.
We check if fd2:=g([2]P) is equal to (4/b^2*f*(f+1/b)^2)/(f^4+(4*a-4*b)/b^2*f^3+(-8*a+6*b)/b^3*f^2+(4*a-4*b)/b^4*f+1/b^4).
The formula is correct if the result is equal to 0.
*/
NormalForm(Numerator(fd2 - (4/b^2*f*(f+1/b)^2)/(f^4+(4*a-4*b)/b^2*f^3+(-8*a+6*b)/b^3*f^2+(4*a-4*b)/b^4*f+1/b^4)), I);  

/*
Chcecking of correctness of differential addition formula using compression function f, where f1:=f(P), f2:=f(Q), f3:=f(P+Q) and f4:=f(P-Q)
We check if f3*f4:=f(P+Q)*f(P-Q) is equal to 1/b^4*(f1-f2)^2/(f1*f2-1/b^2)^2.
The formula is correct if the result is equal to 0.
*/
NormalForm(Numerator( f3*f4 - 1/b^4*(f1-f2)^2/(f1*f2-1/b^2)^2), I1);    




/*
Chcecking of correctness of point recovery formula using compression function f, where P:=(x1, y1), x2:=xQ, f2:=f(Q), f3:=f(P+Q) and f4:=f(P-Q)
We check if x2:=xQ is equal to 2/b^2*(f1^2*f2+f1*f2^2+(8*a-4*b)/b^2*f1*f2+f1/b^2+f2/b^2)/(f1*f2-1/b^2)^2.
The formula is correct if the result is equal to 0.
*/
NormalForm(Numerator(f3+f4-2/b^2*(f1^2*f2+f1*f2^2+(8*a-4*b)/b^2*f1*f2+f1/b^2+f2/b^2)/(f1*f2-1/b^2)^2),I1);