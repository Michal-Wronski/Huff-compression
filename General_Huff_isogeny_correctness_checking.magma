/*
The code by Robert Dryło, Tomasz Kijko and Michał Wroński from Military University of Technology in Warsaw.
This code proves that presented formulas for isogenous curve computation and point evaluation (also using point compression f(P)=xy) on general Huff's curve are correct.
*/

//Definition of addition on general Huff's curves using affine coordinates
GHuffAddition:=function(x1, y1, x2, y2, a, b)
	x3:=(x1+x2)*(1+a*y1*y2)/((1+b*x1*x2)*(1-a*y1*y2));
	y3:=(y1+y2)*(1+b*x1*x2)/((1-b*x1*x2)*(1+a*y1*y2));
	return x3,y3;
end function;

//Scalar multiplication on general Huff's curves using binary method
ScalarMult:=function(x1, y1, a, b, k)
	kb:=Intseq(k,2);
	xP:=x1;
	yP:=y1;
	for i:=#kb-1 to 1 by -1 do
		xP,yP:=GHuffAddition(xP, yP, xP, yP, a, b);
		if kb[i] eq 1 then
			xP,yP:=GHuffAddition(xP, yP, x1, y1, a, b);
		end if;
	end for;
	return xP, yP;
end function;

//Function that checks if given point P:=(X:Y:Z) lies on general Huff's curve with coefficients a and b
Valid:=function(X, Y, Z, a, b);
	return X*(a*Y^2-Z^2)-Y*(b*X^2-Z^2);
end function;

//Function which computes f(P+Q)*f(P-Q) in projective representation
AFunct:=function(PX, PZ, QX, QZ, a, b)
	C := PX*QX;
	D := PX*QZ;
	E := PZ*QX;
	F := PZ*QZ;
	ab := a*b;
	G := D - E;
	H := ab*C;
	I := H - F;
	J := G^2;
	K := I^2;
	return J, K;
end function;

//Function which computes f(P+Q) in projective representation
DiffAdd:=function(PX, PZ, QX, QZ, RX, RZ, a, b)
	C := PX*QX;
	D := PX*QZ;
	E := PZ*QX;
	F := PZ*QZ;
	ab := a*b;
	G := D - E;
	H := ab*C;
	I := H - F;
	J := G^2;
	K := I^2;
	SX:=RZ*J;
	SZ:=RX*K;
	return SX, SZ;
end function;

//Function which computes f([2]P) in projective representation
Doubling:=function(X, Z, a, b)
	XX := X^2;
	XZ := X*Z;
	ZZ := Z*Z;
	ab := a*b;
	apb := a+b;
	F := ab*XX;
	G := apb*XZ;
	H := 4*XZ;
	I := F - ZZ;
	M := I^2;
	J := F+G+ZZ;
	L := H*J;
	return L, M;
end function;

///Function which computes kernel of odd l-isogeny using generator P of group of degree l, where P:=(x,y). Kernel is given in affine coordinatesKernel is given in affine coordinates
KernelFromPoint:=function(x, y, a, b, l)
	kernel_x:=[];
	kernel_y:=[];
	x1:=x;
	y1:=y;
	Append(~kernel_x, x1);
	Append(~kernel_y, y1);
	if l eq 2 then
		return kernel_x, kernel_y;
	elif l eq 3 then
		Append(~kernel_x, -x1);
		Append(~kernel_y, -y1);
		return kernel_x, kernel_y;
	else
		x2, y2:= GHuffAddition(x1, y1, x1, y1, a, b);
		Append(~kernel_x, x2);
		Append(~kernel_y, y2);
		Append(~kernel_x, -x2);
		Append(~kernel_y, -y2);
		if l eq 5 then
			return kernel_x, kernel_y;
		else
			for i:=1 to Floor((l-1)/2-2) do
				xt:=x2;
				yt:=y2;
				x2,y2:=GHuffAddition(x2, y2, x1, y1, a, b);
				x1:=xt;
				y1:=yt;
				Append(~kernel_x, x2);
				Append(~kernel_y, y2);
				Append(~kernel_x, -x2);
				Append(~kernel_y, -y2);
			end for;
			return kernel_x, kernel_y;
		end if;
	end if;
end function;


//Function which computes kernel of odd l-isogeny using generator P of group of degree l. Kernel is given in projective compression representation X/Z
KernelFromPointCompr:=function(X, Z, a, b, l)
	kernel_X:=[];
	kernel_Z:=[];
	X1:=X;
	Z1:=Z;
	Append(~kernel_X, X1);
	Append(~kernel_Z, Z1);
	if l eq 3 then
		return kernel_X, kernel_Z;
	else
		X2, Z2:=Doubling(X1, Z1, a, b);
		Append(~kernel_X, X2);
		Append(~kernel_Z, Z2);
		if l eq 5 then
			return kernel_X, kernel_Z;
		else
			for i:=1 to Floor((l-1)/2-2) do
				Xt:=X2;
				X2, Z2:=DiffAdd(X2, Z2, X, Z, X1, Z1, a, b);
				X1:=Xt;
				Append(~kernel_X, X2);
				Append(~kernel_Z, Z2);
			end for;
			return kernel_X, kernel_Z;
		end if;
	end if;
end function;

//Computation isogenous curve using kernel given in affine coordinates
IsogCurve:=function(a,b,kernel_x, kernel_y)
	l := #kernel_x+1;
	Prod_x:=1;
	Prod_y:=1;
	for i:=1 to Floor((#kernel_x)/2) do
		Prod_x:=Prod_x*kernel_x[i]^4;
		Prod_y:=Prod_y*kernel_y[i]^4;
	end for;
	a_p := Prod_y*a^l;
	b_p := Prod_x*b^l;
	return a_p, b_p;
end function;

//Computation isogenous curve using kernel given in projective compression representation
IsogCurveComp:=function(a,b,kernel_X, kernel_Z)
	l := 2*(#kernel_X)+1;
	Prod_a_L:=1;
	Prod_a_M:=1;
	Prod_b_L:=1;
	Prod_b_M:=1;
	for i:=1 to #kernel_X do
		t1 := b*kernel_X[i];
		t2 := a*kernel_X[i];
		t3 := t1+kernel_Z[i];
		t4 := t2+kernel_Z[i];
		Prod_a_L:=Prod_a_L*(kernel_X[i]*t3)^2;
		Prod_a_M:=Prod_a_M*(kernel_Z[i]*t4)^2;
		Prod_b_L:=Prod_b_L*(kernel_X[i]*t4)^2;
		Prod_b_M:=Prod_b_M*(kernel_Z[i]*t3)^2;
	end for;
	a_p:=(a^l)*Prod_a_L/Prod_a_M;
	b_p:=(b^l)*Prod_b_L/Prod_b_M;
	return a_p, b_p;
end function;


//Evaluation of isogeny at point P:=(x1, y1), given in affine coordinates. The kernel of isogeny is given in affine coordinates (in arrays kernel_x and kernel_y)
IsogEval:=function(x1, y1,kernel_x, kernel_y, a, b)
	Prod_x:=x1;
	Prod_y:=y1;
	for i:=1 to #kernel_x do
		x_pq, y_pq:=GHuffAddition(x1, y1, kernel_x[i], kernel_y[i], a, b);
		Prod_x:=Prod_x*(-x_pq/kernel_x[i]);
		Prod_y:=Prod_y*(-y_pq/kernel_y[i]);
	end for;
	return Prod_x, Prod_y;
end function;


//Evaluation of isogeny in point f(P):=X/Z. The kernel of isogeny is given in arrays kernel_X and kernel_Z in projective compression representation
IsogEvalComp:=function(X, Z, a, b, kernel_X, kernel_Z)
	Prod_L:=X;
	Prod_M:=Z;
	for i:=1 to #kernel_X do
		XA, ZA:=AFunct(X, Z, kernel_X[i], kernel_Z[i], a, b);
		Prod_L:=Prod_L*XA*(kernel_Z[i]^2);
		Prod_M:=Prod_M*ZA*(kernel_X[i]^2);
	end for;
	return Prod_L, Prod_M;
end function;

//Computation of short Weierstrass curve W isomorphic to the curve C, where phiCW:C->W is resulting isomorphism
IsomorphicShortWeierstrassCurve:=function(C, Neutral)
	E, phi:=EllipticCurve(C, C!Neutral);
	//Computaion of isomorphic Weierstrass curve curve and isomoprhism phi2: E->W
	W, phi2:=WeierstrassModel(E);
	phiCW:=phi*phi2;
	return W, phiCW;
end function;








//Example of application of presented formulas
f :=  4;
m :=  137;
n :=  94;

//Field chracteristic p definition
p:=f*3^m*5^n-1;
Fp:=GF(p);
P<s>:=PolynomialRing(Fp);

//Definition of extension field Fp2 of degree 2, defined by irreducible polynomial of degree 2: s^2+1
Fp2<t>:=ext<Fp|s^2+1>;

//Coefficients ah and bh of Huff's curve H
ah:=t;
bh:=Fp2!(1);
x1 := 0x0;
x0 := 0x7331b6ea6e050abc59001ec5319c41bcdda041760aa383fa0c0317fb828c6f6fb05917803155b9ecb70a58af37ba6608bea24da0d6ed1;
y1 := 0x104235fb4cf6140df09ce089b4978bdb51e6b419e99ef79db30f13d1e4d4713b3a31451cd1513270542e477471e2467460bb8f943da763;
y0 := 0x0;

//(p+1)/f
r :=  0xa906b869ab471b86ce23a2ae536f7efe269e3423d803cd9afd80ffefe1ed712236ad0d0581896b3d9e5bc6148decbf665f667e90ce9db;

//Coordinates of generator G_H of subgroup of order (p+1)/f on H
x_h:=x1*t+x0;
y_h:=y1*t+y0;

//Coefficients a and b of general Huff's curve GH
a := 1/bh^2;
b := 1/ah^2;

//Coordinates of generator G of subgroup of order (p+1)/f on GH
x_G := ah*x_h;
y_G := bh*y_h;

print "Sprawdzenie generatora";
Valid(x_G,y_G,1,a,b);

//Compression of generator f(G)
f_P:=x_G*y_G;



//Computation of point G3 of order 3
x_G3, y_G3:=ScalarMult(x_G, y_G, a, b, 3^(m-1)*5^n);
print "Sprawdzenie 3G", x_G3, y_G3;
Valid(x_G3,y_G3,1,a,b);

//Compression of point G3
fG3:=x_G3*y_G3;

//Computation of point G5n of order 5^n
x_G5n, y_G5n:=ScalarMult(x_G, y_G, a, b, 3^m);

//Compression of point G5n
fG5n:=x_G5n*y_G5n;

//Computation of kernel using projective compression representation of point G3
kernel_X, kernel_Z:=KernelFromPointCompr(fG3, 1, a, b, 3);

//Computation of kernel using affine representation of point G3
kernel_x, kernel_y:=KernelFromPoint(x_G3, y_G3, a, b, 3);


//Computation of isogenous curve GH_p using kernel in compression projective representation
a_p, b_p:=IsogCurveComp(a, b, kernel_X,  kernel_Z);

//Computation of isogenous curve GH_p_2 using kernel in affine representation
a_p_2, b_p_2:=IsogCurve(a,b,kernel_x, kernel_y);

//Checking if curve GH_p with coeffcients a_p and b_p computed using compressions is isomorphic to the curve GH_p_2 with coeffcients a_p_2 and b_p_2 computed using affine coordinates. We will check if a_p/b_p eq a_p_2/b_p_2
print "I will check if if curve GH with coeffcients a_p and b_p computed using compression function is isomorphic to the curve GH with coeffcients a_p_2 and b_p_2 computed using affine coordinates. We will check if a_p/b_p eq a_p_2/b_p_2";
a_p/b_p eq a_p_2/b_p_2;
printf "\n\n";

//Evaluation of compression of point F given by projective compression representation X_F/Z_F:=xi(fG5n), using isogeny xi and its kernel in projective compression representation
X_F, Z_F:=IsogEvalComp(fG5n, 1, a, b, kernel_X, kernel_Z);

//Evaluation of point F given by affine coordinates (x_F, y_F):=xi(G5n), using isogeny xi and its kernel in affine coordinates
x_F, y_F:=IsogEval(x_G5n, y_G5n,kernel_x, kernel_y, a, b);

//Chcecking if compression of point (x_F, y_F) evaluated by an isogeny xi is equal to the X_F/Z_F
print "I will check if point evaluation by an isogeny computed using compression function is the same as point evaluation by an isogeny computed using affine coordinates. We will check if X_F/Z_F eq x_F*y_F";
X_F/Z_F eq x_F*y_F;
printf "\n\n";



//Checking if curve GH_p with coeffcients a_p and b_p is properly computed. It will be also checked if point evaluation is properly computed. Results will be compared to curve obtained using built-in magma function for computation of isogeny from kernel;
print "I will check if curve GH_p with coeffcients a_p and b_p is properly computed. I will also check if point evaluation is properly computed. I compare computations using built-in magma function for computation of isogeny from kernel";
printf "\n\n";
//Computaion of isomorphic elliptic curve curve and isomoprhism phi: C->E
Pr<X,Y,Z>:=ProjectiveSpace(Fp2, 2);
C:=Curve(Pr, [X*(a*Y^2-Z^2)-Y*(b*X^2-Z^2)]);
Neutral:=[Fp2!0, Fp2!0, Fp2!1];
W, phi:=IsomorphicShortWeierstrassCurve(C, Neutral);

printf "Elliptic curve isomorphic to the general Huff's curve C:%o is given by %o\n", C, W;
printf "\n\n";
//Definition of point of order 3 on curve C
C_G3:=C![x_G3, y_G3];

// Computation of point W_G3 of order 3 on Weierstrass curve W using isomorphisms phi
W_G3:=phi(C_G3);

//Definition of point G_G5n of order 5^n on curve C
C_G5n:=C![x_G5n, y_G5n];

// Computation of point W_G5n of order 5^n on Weierstrass curve W using isomorphisms phi
W_G5n:=phi(C_G5n);

printf "Point of order 3 using isomorphism C->W transforms point P in C %o to the point %o in W\n", C_G3, W_G3;
printf "\n\n";

printf "Point of order 5n using isomorphism C->W transforms point P in C %o to the point %o in W\n", C_G5n, W_G5n; 
printf "\n\n";


//Computaion of isomorphic elliptic curve to the curve GH_p and isomoprhism phi: CIsog->W2
CIsog:=Curve(Pr, [X*(a_p*Y^2-Z^2)-Y*(b_p*X^2-Z^2)]);
Neutral:=[Fp2!0, Fp2!0, Fp2!1];

W2, phip:=IsomorphicShortWeierstrassCurve(CIsog, Neutral);

printf "Elliptic curve isomorphic to the general Huff's curve CIsog:%o is given by %o\n\n", CIsog, W2;

printf "Now I will compute isogenous elliptic curve to the curve W using built-in Magma function isogeny_FromKernel, with isogeny zeta:W->WIsog\n\n";
_<x>:=PolynomialRing(Fp2);
ker:=&*[x-P[1] : P in [z*W_G3: z in [1..2]]];
WIsog, zeta:=IsogenyFromKernel(W, ker);

printf "Elliptic curve isogeonus to the Weierstrass curve W:%o is given by %o and an isogeny zeta %o\n", W, WIsog, zeta;
printf "\n\n";

//Evaluation of point WI_G5n using isogeny zeta
WI_G5n:=zeta(W_G5n);
printf "I compute evaluation of point %o of order 5n, using isogeny zeta. zeta(P):=%o\n", W_G5n, WI_G5n;
printf "\n\n";

//Checking if curves W2 and WIsog are isomorphic. If so, the isomorphism psi is returned
bl, psi:=IsIsomorphic(W2, WIsog);
print "Elliptic curves W2 and WIsog should be isomorphic. We will check if it is true";

//Definition of point F on curve CIsog
CIG5n:=CIsog![x_F, y_F];


//Evaluation of point W2_G5n using isomorphism phip
W2_G5n:=phip(CIG5n);

//Checking if x-coordinate of point WI_G5n is equal to x-coordinate of point psi(W2_G5n). If so, the formulas are proper.
WI_G5n[1] eq psi(W2_G5n)[1];








